/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Grade } from "./Grade";
import { GradeCountArgs } from "./GradeCountArgs";
import { GradeFindManyArgs } from "./GradeFindManyArgs";
import { GradeFindUniqueArgs } from "./GradeFindUniqueArgs";
import { DeleteGradeArgs } from "./DeleteGradeArgs";
import { GradeService } from "../grade.service";
@graphql.Resolver(() => Grade)
export class GradeResolverBase {
  constructor(protected readonly service: GradeService) {}

  async _gradesMeta(
    @graphql.Args() args: GradeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Grade])
  async grades(@graphql.Args() args: GradeFindManyArgs): Promise<Grade[]> {
    return this.service.grades(args);
  }

  @graphql.Query(() => Grade, { nullable: true })
  async grade(
    @graphql.Args() args: GradeFindUniqueArgs
  ): Promise<Grade | null> {
    const result = await this.service.grade(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Grade)
  async deleteGrade(
    @graphql.Args() args: DeleteGradeArgs
  ): Promise<Grade | null> {
    try {
      return await this.service.deleteGrade(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
